{
  "ballerina": [
    {
      "name": "http",
      "version": "2.14.0",
      "serviceTypeSkipList": [
        "Service",
        "ServiceContract",
        "RequestInterceptor",
        "ResponseInterceptor",
        "RequestErrorInterceptor",
        "ResponseErrorInterceptor",
        "InterceptableService"
      ],
      "serviceDeclaration": {
        "displayName": "HTTP Service",
        "description": "Create REST APIs from scratch or by importing an OpenAPI definition",
        "optionalTypeDescriptor": 1,
        "typeDescriptorLabel": "Http Service Type",
        "typeDescriptorDescription": "",
        "typeDescriptorDefaultValue": "Service",
        "addDefaultTypeDescriptor": 0,
        "optionalAbsoluteResourcePath": 0,
        "absoluteResourcePathLabel": "Service Base Path",
        "absoluteResourcePathDescription": "",
        "absoluteResourcePathDefaultValue": "/",
        "optionalStringLiteral": 1,
        "stringLiteralLabel": "Service Base Path",
        "stringLiteralDescription": "",
        "stringLiteralDefaultValue": "\"/\"",
        "listenerKind": "MULTIPLE_SELECT",
        "kind": "http"
      },
      "serviceTypes": {
        "Service": {
          "name": "Service",
          "description": "",
          "functions": []
        }
      },
      "annotations": {
        "ServiceConfig": {
          "attachmentPoints": [
            "SERVICE"
          ],
          "displayName": "Service Configuration",
          "description": "Define advanced configurations like service level security, etc.",
          "typeConstraint": "http:HttpServiceConfig"
        },
        "ResourceConfig": {
          "attachmentPoints": [
            "OBJECT_METHOD"
          ],
          "displayName": "Resource Configuration",
          "description": "Define advanced configurations like resource level media types, security, etc.",
          "typeConstraint": "http:HttpResourceConfig"
        }
      },
      "initForm": {
      }
    },
    {
      "name": "graphql",
      "version": "1.16.0",
      "serviceTypeSkipList": [
        "Interceptor",
        "Service"
      ],
      "serviceDeclaration": {
        "displayName": "GraphQL Service",
        "description": "Create GraphQL service",
        "optionalTypeDescriptor": 1,
        "typeDescriptorLabel": "GraphQL Service Type",
        "typeDescriptorDescription": "The name of the service contract type",
        "typeDescriptorDefaultValue": "Service",
        "addDefaultTypeDescriptor": 0,
        "optionalAbsoluteResourcePath": 0,
        "absoluteResourcePathLabel": "Service Base Path",
        "absoluteResourcePathDescription": "",
        "absoluteResourcePathDefaultValue": "/graphql",
        "optionalStringLiteral": 1,
        "stringLiteralLabel": "Service Base Path",
        "stringLiteralDescription": "",
        "stringLiteralDefaultValue": "\"/graphql\"",
        "listenerKind": "MULTIPLE_SELECT",
        "kind": "graphql"
      },
      "serviceTypes": {
        "Service": {
          "name": "Service",
          "description": "",
          "functions": []
        }
      },
      "annotations": {
        "ServiceConfig": {
          "attachmentPoints": [
            "SERVICE"
          ],
          "displayName": "Service Configuration",
          "description": "Define service configurations such as maximum query depth.",
          "typeConstraint": "graphql:GraphqlServiceConfig"
        },
        "ResourceConfig": {
          "attachmentPoints": [
            "OBJECT_METHOD"
          ],
          "displayName": "Field Configuration",
          "description": "Define configurations such as field level cache.",
          "typeConstraint": "graphql:GraphqlResourceConfig"
        }
      },
      "initForm": {
        "basePath": {
          "label": "Base Path",
          "description": "The base path of the GraphQL service",
          "defaultValue": "/graphql",
          "placeholder": "/graphql",
          "valueType": "EXPRESSION",
          "typeConstraint": "string",
          "typeMembers": [],
          "sourceKind": "SERVICE_BASE_PATH",
          "selections": []
        },
        "port": {
          "label": "Port",
          "description": "The port on which the GraphQL service listens",
          "defaultValue": "8080",
          "placeholder": "8080",
          "valueType": "EXPRESSION",
          "typeConstraint": "int",
          "typeMembers": [],
          "sourceKind": "LISTENER_PARAM_REQUIRED",
          "selections": []
        }
      }
    },
    {
      "name": "tcp",
      "version": "1.13.0",
      "serviceTypeSkipList": [
        "ConnectionService"
      ],
      "serviceDeclaration": {
        "displayName": "TCP Service",
        "description": "Create TCP service to handle TCP client connections",
        "optionalTypeDescriptor": 1,
        "typeDescriptorLabel": "TCP Service Type",
        "typeDescriptorDescription": "",
        "typeDescriptorDefaultValue": "Service",
        "addDefaultTypeDescriptor": 0,
        "optionalAbsoluteResourcePath": 1,
        "absoluteResourcePathLabel": "Service Base Path",
        "absoluteResourcePathDescription": "",
        "absoluteResourcePathDefaultValue": "",
        "optionalStringLiteral": 1,
        "stringLiteralLabel": "Service Base Path",
        "stringLiteralDescription": "",
        "stringLiteralDefaultValue": "",
        "listenerKind": "MULTIPLE_SELECT",
        "kind": "tcp"
      },
      "serviceTypes": {
        "Service": {
          "name": "Service",
          "description": "",
          "functions": [
            {
              "name": "onConnect",
              "description": "The `onConnect` remote method will be triggered when a message is received from a tcp client",
              "accessor": "",
              "kind": "REMOTE",
              "returnType": "tcp:ConnectionService|tcp:Error?",
              "returnError": 1,
              "returnTypeEditable": 0,
              "enable": 0,
              "parameters": [
                {
                  "name": "caller",
                  "label": "Caller Object",
                  "description": "The new client connection",
                  "kind": "REQUIRED",
                  "type": "tcp:Caller",
                  "defaultValue": "",
                  "importStatements": "",
                  "nameEditable": 1,
                  "typeEditable": 0
                }
              ]
            }
          ]
        }
      },
      "initForm": {
        "localPort": {
          "label": "TCP Port",
          "description": "The port on which the TCP service listens",
          "defaultValue": "80",
          "placeholder": "80",
          "valueType": "EXPRESSION",
          "typeConstraint": "int",
          "typeMembers": [],
          "sourceKind": "LISTENER_PARAM_REQUIRED",
          "selections": []
        }
      }
    },
    {
      "name": "file",
      "version": "1.12.0",
      "serviceTypeSkipList": [
        "Service"
      ],
      "serviceDeclaration": {
        "displayName": "Directory Service",
        "description": "Create a service to monitor a directory for file events",
        "optionalTypeDescriptor": 1,
        "typeDescriptorLabel": "Service Type",
        "typeDescriptorDescription": "",
        "typeDescriptorDefaultValue": "Service",
        "addDefaultTypeDescriptor": 0,
        "optionalAbsoluteResourcePath": 1,
        "absoluteResourcePathLabel": "Service Base Path",
        "absoluteResourcePathDescription": "",
        "absoluteResourcePathDefaultValue": "",
        "optionalStringLiteral": 1,
        "stringLiteralLabel": "Service Base Path",
        "stringLiteralDescription": "",
        "stringLiteralDefaultValue": "",
        "listenerKind": "MULTIPLE_SELECT",
        "kind": "file"
      },
      "serviceTypes": {
        "Service": {
          "name": "Service",
          "description": "",
          "functions": [
            {
              "name": "onCreate",
              "description": "The `onCreate` remote method will be triggered when a file is created in the specified directory",
              "accessor": "",
              "kind": "REMOTE",
              "returnType": "",
              "returnError": 0,
              "returnTypeEditable": 0,
              "enable": 1,
              "parameters": [
                {
                  "name": "event",
                  "label": "The File event",
                  "description": "The File event",
                  "kind": "REQUIRED",
                  "type": "file:FileEvent",
                  "defaultValue": "",
                  "importStatements": "",
                  "nameEditable": 1,
                  "typeEditable": 0
                }
              ]
            },
            {
              "name": "onDelete",
              "description": "The `onDelete` remote method will be triggered when a file is deleted in the specified directory",
              "accessor": "",
              "kind": "REMOTE",
              "returnType": "",
              "returnError": 0,
              "returnTypeEditable": 0,
              "enable": 0,
              "parameters": [
                {
                  "name": "event",
                  "label": "The File event",
                  "description": "The File event",
                  "kind": "REQUIRED",
                  "type": "file:FileEvent",
                  "defaultValue": "",
                  "importStatements": "",
                  "nameEditable": 1,
                  "typeEditable": 0
                }
              ]
            },
            {
              "name": "onModify",
              "description": "The `onModify` remote method will be triggered when a file is modified in the specified directory",
              "accessor": "",
              "kind": "REMOTE",
              "returnType": "",
              "returnError": 0,
              "returnTypeEditable": 0,
              "enable": 0,
              "parameters": [
                {
                  "name": "event",
                  "label": "The File event",
                  "description": "The File event",
                  "kind": "REQUIRED",
                  "type": "file:FileEvent",
                  "defaultValue": "",
                  "importStatements": "",
                  "nameEditable": 1,
                  "typeEditable": 0
                }
              ]
            }
          ]
        }
      },
      "initForm": {
        "path": {
          "label": "Path",
          "description": "Directory path to be monitored",
          "defaultValue": "",
          "placeholder": "\"/tmp\"",
          "valueType": "EXPRESSION",
          "typeConstraint": "string",
          "typeMembers": [],
          "sourceKind": "LISTENER_PARAM_INCLUDED_FIELD",
          "selections": []
        },
        "recursive": {
          "label": "Recursive",
          "description": "Recursively monitor all sub-directories",
          "defaultValue": "false",
          "placeholder": "false",
          "valueType": "FLAG",
          "typeConstraint": "boolean",
          "typeMembers": [],
          "sourceKind": "LISTENER_PARAM_INCLUDED_DEFAULTABLE_FIELD",
          "selections": []
        }
      }
    },
    {
      "name": "ftp",
      "version": "2.13.0",
      "serviceTypeSkipList": [
        "Service"
      ],
      "serviceDeclaration": {
        "displayName": "FTP Service",
        "description": "Create a service to monitor a directory in a FTP server for file events",
        "optionalTypeDescriptor": 1,
        "typeDescriptorLabel": "Service Type",
        "typeDescriptorDescription": "The name of the service contract type",
        "typeDescriptorDefaultValue": "Service",
        "addDefaultTypeDescriptor": 0,
        "optionalAbsoluteResourcePath": 1,
        "absoluteResourcePathLabel": "Service Base Path",
        "absoluteResourcePathDescription": "",
        "absoluteResourcePathDefaultValue": "",
        "optionalStringLiteral": 1,
        "stringLiteralLabel": "Service Base Path",
        "stringLiteralDescription": "",
        "stringLiteralDefaultValue": "",
        "listenerKind": "MULTIPLE_SELECT",
        "kind": "file"
      },
      "serviceTypes": {
        "Service": {
          "name": "Service",
          "description": "",
          "functions": [
            {
              "name": "onFileChange",
              "description": "The `onFileChange` remote method will be triggered when a file change event occurs",
              "accessor": "",
              "kind": "REMOTE",
              "returnType": "error?",
              "returnError": 1,
              "returnTypeEditable": 0,
              "enable": 1,
              "parameters": [
                {
                  "name": "event",
                  "label": "The File watch event",
                  "description": "The File watch event",
                  "kind": "REQUIRED",
                  "type": "ftp:WatchEvent & readonly",
                  "defaultValue": "",
                  "importStatements": "",
                  "nameEditable": 1,
                  "typeEditable": 0
                },
                {
                  "name": "caller",
                  "label": "Caller",
                  "description": "The FTP caller object to execute file operations",
                  "kind": "REQUIRED",
                  "type": "ftp:Caller",
                  "defaultValue": "",
                  "importStatements": "",
                  "nameEditable": 1,
                  "typeEditable": 0
                }
              ]
            }
          ]
        }
      },
      "initForm": {
        "host": {
          "label": "Host",
          "description": "Target FTP server url",
          "defaultValue": "\"127.0.0.1\"",
          "placeholder": "\"127.0.0.1\"",
          "valueType": "EXPRESSION",
          "typeConstraint": "string",
          "typeMembers": [],
          "sourceKind": "LISTENER_PARAM_INCLUDED_DEFAULTABLE_FIELD",
          "selections": []
        },
        "port": {
          "label": "Port",
          "description": "Target FTP server port",
          "defaultValue": "21",
          "placeholder": "21",
          "valueType": "EXPRESSION",
          "typeConstraint": "int",
          "typeMembers": [],
          "sourceKind": "LISTENER_PARAM_INCLUDED_DEFAULTABLE_FIELD",
          "selections": []
        },
        "protocol": {
          "label": "Protocol",
          "description": "The protocol to connect to the FTP server",
          "defaultValue": "\"ftp\"",
          "placeholder": "\"ftp\"",
          "valueType": "SINGLE_SELECT",
          "typeConstraint": "string",
          "typeMembers": [],
          "sourceKind": "LISTENER_PARAM_INCLUDED_DEFAULTABLE_FIELD",
          "selections": [
            {
              "label": "ftp",
              "value": "\"ftp\""
            },
            {
              "label": "sftp",
              "value": "\"sftp\""
            }
          ]
        },
        "path": {
          "label": "Path",
          "description": "The path to be monitored",
          "defaultValue": "\"/\"",
          "placeholder": "\"/\"",
          "valueType": "EXPRESSION",
          "typeConstraint": "string",
          "typeMembers": [],
          "sourceKind": "LISTENER_PARAM_INCLUDED_DEFAULTABLE_FIELD",
          "selections": []
        }
      }
    },
    {
      "name": "mqtt",
      "version": "1.4.0",
      "serviceTypeSkipList": [],
      "serviceDeclaration": {
        "displayName": "MQTT Event Handler",
        "description": "Create a service to handle messages from an MQTT broker",
        "optionalTypeDescriptor": 1,
        "typeDescriptorLabel": "Service Type",
        "typeDescriptorDescription": "The name of the service contract type",
        "typeDescriptorDefaultValue": "Service",
        "addDefaultTypeDescriptor": 0,
        "optionalAbsoluteResourcePath": 1,
        "absoluteResourcePathLabel": "Service Base Path",
        "absoluteResourcePathDescription": "",
        "absoluteResourcePathDefaultValue": "",
        "optionalStringLiteral": 1,
        "stringLiteralLabel": "Service Base Path",
        "stringLiteralDescription": "",
        "stringLiteralDefaultValue": "",
        "listenerKind": "MULTIPLE_SELECT",
        "kind": "event"
      },
      "serviceTypes": {
        "Service": {
          "name": "Service",
          "description": "",
          "functions": [
            {
              "name": "onMessage",
              "description": "The `onMessage` remote method will be triggered when a message is received from a subscribed topic.",
              "accessor": "",
              "kind": "REMOTE",
              "returnType": "error?",
              "returnError": 1,
              "returnTypeEditable": 0,
              "enable": 1,
              "canAddParameter": 0,
              "parameters": [
                {
                  "name": "message",
                  "label": "Messages",
                  "description": "The messages received for the topic",
                  "kind": "REQUIRED",
                  "type": "mqtt:Message",
                  "defaultValue": "",
                  "importStatements": "",
                  "nameEditable": 1,
                  "typeEditable": 0
                }
              ]
            }
          ]
        }
      },
      "initForm": {
        "serviceUri": {
          "label": "Service URI",
          "description": "The URI of the MQTT broker",
          "defaultValue": "",
          "placeholder": "\"mqtt://localhost:1883\"",
          "valueType": "EXPRESSION",
          "typeConstraint": "string",
          "typeMembers": [],
          "sourceKind": "LISTENER_PARAM_REQUIRED",
          "selections": []
        },
        "clientId": {
          "label": "Client ID",
          "description": "A unique identifier to identify by the MQTT broker",
          "defaultValue": "",
          "placeholder": "\"unique_client_001\"",
          "valueType": "EXPRESSION",
          "typeConstraint": "string",
          "typeMembers": [],
          "sourceKind": "LISTENER_PARAM_REQUIRED",
          "selections": []
        },
        "subscriptions": {
          "label": "Subscriptions",
          "description": "The topics to subscribe to",
          "defaultValue": "",
          "placeholder": "\"topic1\"",
          "valueType": "EXPRESSION",
          "typeConstraint": "string|string[]",
          "typeMembers": [],
          "sourceKind": "LISTENER_PARAM_REQUIRED",
          "selections": []
        }
      }
    },
    {
      "name": "ai",
      "version": "1.0.0",
      "serviceTypeSkipList": [],
      "serviceDeclaration": {
        "displayName": "AI Agent Service",
        "description": "",
        "optionalTypeDescriptor": 1,
        "typeDescriptorLabel": "Agent Service Type",
        "typeDescriptorDescription": "The service type descriptor",
        "typeDescriptorDefaultValue": "",
        "addDefaultTypeDescriptor": 0,
        "optionalAbsoluteResourcePath": 0,
        "absoluteResourcePathLabel": "Service Base Path",
        "absoluteResourcePathDescription": "",
        "absoluteResourcePathDefaultValue": "/agentChat",
        "optionalStringLiteral": 1,
        "stringLiteralLabel": "Service Base Path",
        "stringLiteralDescription": "",
        "stringLiteralDefaultValue": "",
        "listenerKind": "MULTIPLE_SELECT",
        "kind": "agent"
      },
      "serviceTypes": {
      }
    },
    {
      "name": "mcp",
      "version": "1.0.0",
      "serviceTypeSkipList": [
        "AdvancedService"
      ],
      "serviceDeclaration": {
        "displayName": "MCP Service",
        "description": "Create MCP service",
        "optionalTypeDescriptor": 1,
        "typeDescriptorLabel": "MCP Service Type",
        "typeDescriptorDescription": "The service type descriptor",
        "typeDescriptorDefaultValue": "",
        "addDefaultTypeDescriptor": 0,
        "optionalAbsoluteResourcePath": 0,
        "absoluteResourcePathLabel": "Base Path",
        "absoluteResourcePathDescription": "",
        "absoluteResourcePathDefaultValue": "/mcp",
        "optionalStringLiteral": 1,
        "stringLiteralLabel": "Service Base Path",
        "stringLiteralDescription": "",
        "stringLiteralDefaultValue": "",
        "listenerKind": "MULTIPLE_SELECT",
        "kind": "mcp"
      },
      "serviceTypes": {
      },
      "annotations": {
        "ServiceConfig": {
          "attachmentPoints": [
            "SERVICE"
          ],
          "displayName": "Service Configuration",
          "description": "Define mcp service configuration",
          "typeConstraint": "mcp:ServiceConfiguration"
        }
      },
      "initForm": {
        "serviceName": {
          "label": "Service Name",
          "description": "The name of the mcp service",
          "defaultValue": "",
          "placeholder": "MCP Service",
          "valueType": "EXPRESSION",
          "typeConstraint": "string",
          "typeMembers": [],
          "sourceKind": "SOURCE_ANNOTATION",
          "selections": []
        },
        "version": {
          "label": "Version",
          "description": "The version of the mcp service",
          "defaultValue": "1.0.0",
          "placeholder": "1.0.0",
          "valueType": "EXPRESSION",
          "typeConstraint": "\"string\"",
          "typeMembers": [],
          "sourceKind": "SOURCE_ANNOTATION",
          "selections": []
        },
        "port": {
          "label": "Port",
          "description": "The port on which the MCP service listens",
          "defaultValue": "8080",
          "placeholder": "8080",
          "valueType": "EXPRESSION",
          "typeConstraint": "int",
          "typeMembers": [],
          "sourceKind": "LISTENER_PARAM_REQUIRED",
          "selections": []
        },
        "basePath": {
          "label": "Base Path",
          "description": "The base path of the MCP service",
          "defaultValue": "/mcp",
          "placeholder": "/mcp",
          "valueType": "EXPRESSION",
          "typeConstraint": "string",
          "typeMembers": [],
          "sourceKind": "SERVICE_BASE_PATH",
          "selections": []
        }
      }
    }
  ],
  "ballerinax": [
    {
      "name": "asb",
      "version": "3.9.0",
      "serviceTypeSkipList": [],
      "serviceDeclaration": {
        "displayName": "Azure Service Bus Event Handler",
        "description": "Create a service to handle messages from an Azure Service Bus entity",
        "optionalTypeDescriptor": 1,
        "typeDescriptorLabel": "Service Type",
        "typeDescriptorDescription": "The name of the service contract type",
        "typeDescriptorDefaultValue": "Service",
        "addDefaultTypeDescriptor": 0,
        "optionalAbsoluteResourcePath": 1,
        "absoluteResourcePathLabel": "Service Base Path",
        "absoluteResourcePathDescription": "",
        "absoluteResourcePathDefaultValue": "",
        "optionalStringLiteral": 1,
        "stringLiteralLabel": "Service Base Path",
        "stringLiteralDescription": "",
        "stringLiteralDefaultValue": "",
        "listenerKind": "MULTIPLE_SELECT",
        "kind": "event"
      },
      "serviceTypes": {
        "Service": {
          "name": "Service",
          "description": "",
          "functions": [
            {
              "name": "onMessage",
              "description": "Triggers when new message received for the azure service bus",
              "accessor": "",
              "kind": "REMOTE",
              "returnType": "error?",
              "returnError": 1,
              "returnTypeEditable": 0,
              "enable": 1,
              "parameters": [
                {
                  "name": "message",
                  "label": "Messages",
                  "description": "The received message",
                  "kind": "REQUIRED",
                  "type": "asb:Message",
                  "defaultValue": "",
                  "importStatements": "",
                  "nameEditable": 1,
                  "typeEditable": 0
                }
              ]
            },
            {
              "name": "onError",
              "description": "Triggers when error occurred in the azure service bus",
              "accessor": "",
              "kind": "REMOTE",
              "returnType": "error?",
              "returnError": 1,
              "returnTypeEditable": 0,
              "enable": 0,
              "parameters": [
                {
                  "name": "asbErr",
                  "label": "Messages",
                  "description": "The messages received for the topic",
                  "kind": "REQUIRED",
                  "type": "asb:MessageRetrievalError",
                  "defaultValue": "",
                  "importStatements": "",
                  "nameEditable": 1,
                  "typeEditable": 0
                }
              ]
            }
          ]
        }
      },
      "initForm": {
        "connectionString": {
          "label": "Connection String",
          "description": "The connection string to connect to the Azure Service Bus namespace",
          "defaultValue": "",
          "placeholder": "\"Endpoint=sb://<NAMESPACE>.servicebus.windows.net/;SharedAccessKeyName=<KEY_NAME>;SharedAccessKey=<KEY_VALUE>\"",
          "valueType": "EXPRESSION",
          "typeConstraint": "string",
          "typeMembers": [],
          "sourceKind": "LISTENER_PARAM_INCLUDED_FIELD",
          "selections": []
        },
        "entityConfig": {
          "label": "Entity Config",
          "description": "The entity configuration to connect to the Azure Service Bus",
          "defaultValue": "",
          "placeholder": "{}",
          "valueType": "EXPRESSION",
          "typeConstraint": "asb:TopicSubsConfig|asb:QueueConfig",
          "typeMembers": [
            {
              "type": "TopicSubsConfig",
              "packageInfo": "ballerinax:asb:3.9.0",
              "kind": "RECORD_TYPE"
            },
            {
              "type": "QueueConfig",
              "packageInfo": "ballerinax:asb:3.9.0",
              "kind": "RECORD_TYPE"
            }
          ],
          "sourceKind": "LISTENER_PARAM_INCLUDED_FIELD",
          "selections": []
        }
      }
    },
    {
      "name": "rabbitmq",
      "version": "3.2.0",
      "serviceTypeSkipList": [],
      "serviceDeclaration": {
        "displayName": "RabbitMQ Event Handler",
        "description": "Create a service to handle messages from a RabbitMQ queue",
        "optionalTypeDescriptor": 1,
        "typeDescriptorLabel": "Service Type",
        "typeDescriptorDescription": "The name of the service contract type",
        "typeDescriptorDefaultValue": "Service",
        "addDefaultTypeDescriptor": 0,
        "optionalAbsoluteResourcePath": 1,
        "absoluteResourcePathLabel": "Service Base Path",
        "absoluteResourcePathDescription": "",
        "absoluteResourcePathDefaultValue": "",
        "optionalStringLiteral": 0,
        "stringLiteralLabel": "Queue Name",
        "stringLiteralDescription": "The name of the queue",
        "stringLiteralDefaultValue": "\"\"",
        "listenerKind": "MULTIPLE_SELECT",
        "kind": "event"
      },
      "serviceTypes": {
        "Service": {
          "name": "Service",
          "description": "",
          "functions": [
            {
              "name": "onMessage",
              "description": "The `onMessage` remote method will be triggered when a message is received in the specified queue",
              "accessor": "",
              "kind": "REMOTE",
              "returnType": "error?",
              "returnError": 1,
              "returnTypeEditable": 0,
              "enable": 1,
              "parameters": [
                {
                  "name": "message",
                  "label": "message",
                  "description": "The message received from the RabbitMQ queue",
                  "kind": "REQUIRED",
                  "type": "rabbitmq:AnydataMessage",
                  "defaultValue": "",
                  "importStatements": "",
                  "nameEditable": 1,
                  "typeEditable": 1
                },
                {
                  "name": "caller",
                  "label": "Caller",
                  "description": "The RabbitMQ caller object to acknowledge the message",
                  "kind": "OPTIONAL",
                  "type": "rabbitmq:Caller",
                  "defaultValue": "",
                  "importStatements": "",
                  "nameEditable": 1,
                  "typeEditable": 0
                }
              ]
            },
            {
              "name": "onRequest",
              "description": "The `onRequest` remote method will be triggered when a message is received in the specified queue and a response is expected",
              "accessor": "",
              "kind": "REMOTE",
              "returnType": "anydata|error",
              "returnError": 1,
              "returnTypeEditable": 0,
              "enable": 0,
              "parameters": [
                {
                  "name": "message",
                  "label": "message",
                  "description": "The message received from the RabbitMQ queue",
                  "kind": "REQUIRED",
                  "type": "rabbitmq:AnydataMessage",
                  "defaultValue": "",
                  "importStatements": "",
                  "nameEditable": 1,
                  "typeEditable": 1
                },
                {
                  "name": "caller",
                  "label": "Caller",
                  "description": "The RabbitMQ caller object to acknowledge the message",
                  "kind": "OPTIONAL",
                  "type": "rabbitmq:Caller",
                  "defaultValue": "",
                  "importStatements": "",
                  "nameEditable": 1,
                  "typeEditable": 0
                }
              ]
            },
            {
              "name": "onError",
              "description": "The `onError` remote method will be triggered when an error occurs during the message processing",
              "accessor": "",
              "kind": "REMOTE",
              "returnType": "error?",
              "returnError": 1,
              "returnTypeEditable": 0,
              "enable": 1,
              "parameters": [
                {
                  "name": "message",
                  "label": "message",
                  "description": "The message received from the RabbitMQ queue",
                  "kind": "REQUIRED",
                  "type": "rabbitmq:AnydataMessage",
                  "defaultValue": "",
                  "importStatements": "",
                  "nameEditable": 1,
                  "typeEditable": 1
                },
                {
                  "name": "rabbitmqError",
                  "label": "RabbitMQ Error",
                  "description": "The error occurred during the message processing",
                  "kind": "REQUIRED",
                  "type": "rabbitmq:Error",
                  "defaultValue": "",
                  "importStatements": "",
                  "nameEditable": 1,
                  "typeEditable": 0
                }
              ]
            }
          ]
        }
      },
      "annotations": {
        "ServiceConfig": {
          "attachmentPoints": [
            "SERVICE"
          ],
          "displayName": "Service Configuration",
          "description": "Define advanced queue configurations ",
          "typeConstraint": "rabbitmq:RabbitMQServiceConfig"
        }
      },
      "initForm": {
        "basePath": {
          "label": "Queue Name",
          "description": "The name of the queue to listen to",
          "defaultValue": "",
          "placeholder": "\"myQueue\"",
          "valueType": "EXPRESSION",
          "typeConstraint": "string",
          "typeMembers": [],
          "sourceKind": "SERVICE_BASE_PATH",
          "selections": []
        },
        "host": {
          "label": "Host",
          "description": "The host used for establishing the connection",
          "defaultValue": "",
          "placeholder": "\"localhost\"",
          "valueType": "EXPRESSION",
          "typeConstraint": "string",
          "typeMembers": [],
          "sourceKind": "LISTENER_PARAM_REQUIRED",
          "selections": []
        },
        "port": {
          "label": "Port",
          "description": "The port used for establishing the connection",
          "defaultValue": "",
          "placeholder": "5672",
          "valueType": "EXPRESSION",
          "typeConstraint": "int",
          "typeMembers": [],
          "sourceKind": "LISTENER_PARAM_REQUIRED",
          "selections": []
        }
      }
    },
    {
      "name": "kafka",
      "version": "4.5.0",
      "serviceTypeSkipList": [],
      "serviceDeclaration": {
        "displayName": "Kafka Event Handler",
        "description": "Create a service to handle messages from Kafka topic(s)",
        "optionalTypeDescriptor": 1,
        "typeDescriptorLabel": "Service Type",
        "typeDescriptorDescription": "The name of the service contract type",
        "typeDescriptorDefaultValue": "Service",
        "addDefaultTypeDescriptor": 0,
        "optionalAbsoluteResourcePath": 1,
        "absoluteResourcePathLabel": "Service Base Path",
        "absoluteResourcePathDescription": "",
        "absoluteResourcePathDefaultValue": "",
        "optionalStringLiteral": 1,
        "stringLiteralLabel": "Service Base Path",
        "stringLiteralDescription": "",
        "stringLiteralDefaultValue": "",
        "listenerKind": "SINGLE_SELECT",
        "kind": "event"
      },
      "serviceTypes": {
        "Service": {
          "name": "Service",
          "description": "",
          "functions": [
            {
              "name": "onConsumerRecord",
              "description": "The `onConsumerRecord` remote method will be triggered when a message is received from Kafka topic(s)",
              "accessor": "",
              "kind": "REMOTE",
              "returnType": "error?",
              "returnError": 1,
              "returnTypeEditable": 0,
              "enable": 1,
              "parameters": [
                {
                  "name": "records",
                  "label": "Consumer records",
                  "description": "The records received for Kafka topic(s)",
                  "kind": "REQUIRED",
                  "type": "kafka:AnydataConsumerRecord[]",
                  "defaultValue": "",
                  "importStatements": "",
                  "nameEditable": 1,
                  "typeEditable": 1
                },
                {
                  "name": "caller",
                  "label": "Caller",
                  "description": "The Kafka caller object to commit the offsets",
                  "kind": "OPTIONAL",
                  "type": "kafka:Caller",
                  "defaultValue": "",
                  "importStatements": "",
                  "nameEditable": 1,
                  "typeEditable": 0
                }
              ]
            },
            {
              "name": "onError",
              "description": "The `onError` remote method will be triggered when an error occurs during the message processing",
              "accessor": "",
              "kind": "REMOTE",
              "returnType": "error?",
              "returnError": 1,
              "returnTypeEditable": 0,
              "enable": 1,
              "parameters": [
                {
                  "name": "kafkaError",
                  "label": "Kafka Error",
                  "description": "The error occurred during the message processing",
                  "kind": "REQUIRED",
                  "type": "kafka:Error",
                  "defaultValue": "",
                  "importStatements": "",
                  "nameEditable": 1,
                  "typeEditable": 0
                }
              ]
            }
          ]
        }
      },
      "initForm": {
        "bootstrapServers": {
          "label": "Bootstrap Servers",
          "description": "List of remote server endpoints of the Kafka brokers",
          "defaultValue": "",
          "placeholder": "\"localhost:9092\"",
          "valueType": "EXPRESSION",
          "typeConstraint": "string|string[]",
          "typeMembers": [],
          "sourceKind": "LISTENER_PARAM_REQUIRED",
          "selections": []
        },
        "topics": {
          "label": "Topic(s)",
          "description": "The topic(s) to subscribe to",
          "defaultValue": "",
          "placeholder": "\"myTopic\"",
          "valueType": "EXPRESSION",
          "typeConstraint": "string|string[]",
          "typeMembers": [],
          "sourceKind": "LISTENER_PARAM_INCLUDED_FIELD",
          "selections": []
        }
      }
    },
    {
      "name": "salesforce",
      "version": "8.2.0",
      "serviceTypeSkipList": [],
      "serviceDeclaration": {
        "displayName": "Salesforce Event Handler",
        "description": "Create a service to handle events from Salesforce",
        "optionalTypeDescriptor": 1,
        "typeDescriptorLabel": "Service Type",
        "typeDescriptorDescription": "The name of the service contract type",
        "typeDescriptorDefaultValue": "Service",
        "addDefaultTypeDescriptor": 0,
        "optionalAbsoluteResourcePath": 1,
        "absoluteResourcePathLabel": "Service Base Path",
        "absoluteResourcePathDescription": "",
        "absoluteResourcePathDefaultValue": "",
        "optionalStringLiteral": 1,
        "stringLiteralLabel": "Service Base Path",
        "stringLiteralDescription": "",
        "stringLiteralDefaultValue": "",
        "listenerKind": "MULTIPLE_SELECT",
        "kind": "event"
      },
      "serviceTypes": {
      },
      "initForm": {
        "auth": {
          "label": "Auth",
          "description": "Configurations related to username/password authentication",
          "defaultValue": "",
          "placeholder": "{username: \"\", password: \"\"}",
          "valueType": "EXPRESSION",
          "typeConstraint": "salesforce:CredentialsConfig",
          "typeMembers": [
            {
              "type": "CredentialsConfig",
              "packageInfo": "ballerinax:salesforce:8.2.0",
              "kind": "RECORD_TYPE"
            }
          ],
          "sourceKind": "LISTENER_PARAM_INCLUDED_FIELD",
          "selections": []
        }
      }
    },
    {
      "name": "trigger.github",
      "version": "0.10.0",
      "serviceTypeSkipList": [],
      "serviceDeclaration": {
        "displayName": "GitHub Event Handler",
        "description": "Create a service to handle events from GitHub",
        "optionalTypeDescriptor": 0,
        "typeDescriptorLabel": "Event Channel",
        "typeDescriptorDescription": "The event channel name",
        "typeDescriptorDefaultValue": "",
        "addDefaultTypeDescriptor": 0,
        "optionalAbsoluteResourcePath": 1,
        "absoluteResourcePathLabel": "Service Base Path",
        "absoluteResourcePathDescription": "",
        "absoluteResourcePathDefaultValue": "",
        "optionalStringLiteral": 1,
        "stringLiteralLabel": "Service Base Path",
        "stringLiteralDescription": "",
        "stringLiteralDefaultValue": "",
        "listenerKind": "MULTIPLE_SELECT",
        "kind": "event"
      },
      "serviceTypes": {
      },
      "initForm": {
        "basePath": {
          "label": "Event Channel",
          "description": "The event channel name",
          "defaultValue": "",
          "placeholder": "\"IssuesService\"",
          "valueType": "SINGLE_SELECT",
          "typeConstraint": "github:GenericServiceType",
          "typeMembers": [],
          "sourceKind": "SERVICE_TYPE_DESCRIPTOR",
          "selections": [
            "IssuesService",
            "IssueCommentService",
            "PullRequestService",
            "PullRequestReviewService",
            "PullRequestReviewCommentService",
            "ReleaseService",
            "LabelService",
            "MilestoneService",
            "PushService",
            "ProjectCardService"
          ]
        }
      }
    },
    {
      "name": "ai",
      "version": "1.0.0",
      "serviceTypeSkipList": [],
      "serviceDeclaration": {
        "displayName": "AI Agent Service",
        "description": "",
        "optionalTypeDescriptor": 1,
        "typeDescriptorLabel": "Agent Service Type",
        "typeDescriptorDescription": "The service type descriptor",
        "typeDescriptorDefaultValue": "",
        "addDefaultTypeDescriptor": 0,
        "optionalAbsoluteResourcePath": 0,
        "absoluteResourcePathLabel": "Service Base Path",
        "absoluteResourcePathDescription": "",
        "absoluteResourcePathDefaultValue": "/agentChat",
        "optionalStringLiteral": 1,
        "stringLiteralLabel": "Service Base Path",
        "stringLiteralDescription": "",
        "stringLiteralDefaultValue": "",
        "listenerKind": "MULTIPLE_SELECT",
        "kind": "agent"
      },
      "serviceTypes": {
      }
    },
    {
      "name": "trigger.twilio",
      "version": "0.10.0",
      "serviceTypeSkipList": [],
      "serviceDeclaration": {
        "displayName": "Twilio Event Handler",
        "description": "Create a service to handle events from Twilio",
        "optionalTypeDescriptor": 0,
        "typeDescriptorLabel": "Event Channel",
        "typeDescriptorDescription": "The event channel name",
        "typeDescriptorDefaultValue": "",
        "addDefaultTypeDescriptor": 0,
        "optionalAbsoluteResourcePath": 1,
        "absoluteResourcePathLabel": "Service Base Path",
        "absoluteResourcePathDescription": "",
        "absoluteResourcePathDefaultValue": "",
        "optionalStringLiteral": 1,
        "stringLiteralLabel": "Service Base Path",
        "stringLiteralDescription": "",
        "stringLiteralDefaultValue": "",
        "listenerKind": "MULTIPLE_SELECT",
        "kind": "event"
      },
      "serviceTypes": {
      },
      "initForm": {
        "basePath": {
          "label": "Event Channel",
          "description": "The event channel name",
          "defaultValue": "",
          "placeholder": "\"CallStatusService\"",
          "valueType": "SINGLE_SELECT",
          "typeConstraint": "twilio:GenericServiceType",
          "typeMembers": [],
          "sourceKind": "SERVICE_TYPE_DESCRIPTOR",
          "selections": [
            "CallStatusService",
            "SmsStatusService"
          ]
        }
      }
    }
  ]
}
