{
  "description": "Test getting kafka listener model",
  "orgName": "ballerinax",
  "pkgName": "kafka",
  "moduleName": "kafka",
  "response": {
    "listener": {
      "id": "10",
      "name": "Kafka Listener",
      "type": "kafka",
      "displayName": "Kafka",
      "description": "Represents a Kafka consumer endpoint.\n",
      "moduleName": "kafka",
      "orgName": "ballerinax",
      "version": "4.5.0",
      "packageName": "kafka",
      "listenerProtocol": "kafka",
      "icon": "https://bcentral-packageicons.azureedge.net/images/ballerinax_kafka_4.5.0.png",
      "properties": {
        "variableNameKey": {
          "metadata": {
            "label": "Name",
            "description": "The name of the listener"
          },
          "codedata": {
            "type": "LISTENER_VAR_NAME"
          },
          "valueType": "IDENTIFIER",
          "valueTypeConstraint": "Global",
          "value": "",
          "enabled": true,
          "editable": true,
          "optional": false,
          "advanced": false
        },
        "bootstrapServers": {
          "metadata": {
            "label": "bootstrapServers",
            "description": "List of remote server endpoints of Kafka brokers"
          },
          "codedata": {
            "type": "LISTENER_INIT_PARAM",
            "originalName": "bootstrapServers"
          },
          "placeholder": "\"\"",
          "valueType": "EXPRESSION",
          "valueTypeConstraint": "string|string[]",
          "value": "",
          "typeMembers": [
            {
              "type": "string",
              "packageInfo": "",
              "kind": "ARRAY_TYPE",
              "selected": false
            },
            {
              "type": "string",
              "packageInfo": "",
              "kind": "BASIC_TYPE",
              "selected": false
            }
          ],
          "enabled": true,
          "editable": true,
          "optional": false,
          "advanced": false
        },
        "groupId": {
          "metadata": {
            "label": "groupId",
            "description": "Unique string that identifies the consumer"
          },
          "codedata": {
            "type": "LISTENER_INIT_PARAM",
            "originalName": "groupId"
          },
          "placeholder": "\"\"",
          "valueType": "EXPRESSION",
          "valueTypeConstraint": "string",
          "value": "",
          "typeMembers": [
            {
              "type": "string",
              "packageInfo": "",
              "kind": "BASIC_TYPE",
              "selected": false
            }
          ],
          "enabled": true,
          "editable": true,
          "optional": true,
          "advanced": true
        },
        "topics": {
          "metadata": {
            "label": "topics",
            "description": "Topics to be subscribed by the consumer"
          },
          "codedata": {
            "type": "LISTENER_INIT_PARAM",
            "originalName": "topics"
          },
          "placeholder": "\"\"",
          "valueType": "EXPRESSION",
          "valueTypeConstraint": "string|string[]",
          "value": "",
          "typeMembers": [
            {
              "type": "string",
              "packageInfo": "",
              "kind": "ARRAY_TYPE",
              "selected": false
            },
            {
              "type": "string",
              "packageInfo": "",
              "kind": "BASIC_TYPE",
              "selected": false
            }
          ],
          "enabled": true,
          "editable": true,
          "optional": true,
          "advanced": true
        },
        "offsetReset": {
          "metadata": {
            "label": "offsetReset",
            "description": "Offset reset strategy if no initial offset"
          },
          "codedata": {
            "type": "LISTENER_INIT_PARAM",
            "originalName": "offsetReset"
          },
          "placeholder": "\"earliest\"",
          "valueType": "EXPRESSION",
          "valueTypeConstraint": "kafka:OffsetResetMethod",
          "value": "",
          "typeMembers": [
            {
              "type": "OffsetResetMethod",
              "packageInfo": "ballerinax:kafka:4.5.0",
              "kind": "BASIC_TYPE",
              "selected": false
            }
          ],
          "enabled": true,
          "editable": true,
          "optional": true,
          "advanced": true
        },
        "partitionAssignmentStrategy": {
          "metadata": {
            "label": "partitionAssignmentStrategy",
            "description": "Strategy class for handling the partition assignment among consumers"
          },
          "codedata": {
            "type": "LISTENER_INIT_PARAM",
            "originalName": "partitionAssignmentStrategy"
          },
          "placeholder": "\"\"",
          "valueType": "EXPRESSION",
          "valueTypeConstraint": "string",
          "value": "",
          "typeMembers": [
            {
              "type": "string",
              "packageInfo": "",
              "kind": "BASIC_TYPE",
              "selected": false
            }
          ],
          "enabled": true,
          "editable": true,
          "optional": true,
          "advanced": true
        },
        "metricsRecordingLevel": {
          "metadata": {
            "label": "metricsRecordingLevel",
            "description": "Metrics recording level"
          },
          "codedata": {
            "type": "LISTENER_INIT_PARAM",
            "originalName": "metricsRecordingLevel"
          },
          "placeholder": "\"\"",
          "valueType": "EXPRESSION",
          "valueTypeConstraint": "string",
          "value": "",
          "typeMembers": [
            {
              "type": "string",
              "packageInfo": "",
              "kind": "BASIC_TYPE",
              "selected": false
            }
          ],
          "enabled": true,
          "editable": true,
          "optional": true,
          "advanced": true
        },
        "metricsReporterClasses": {
          "metadata": {
            "label": "metricsReporterClasses",
            "description": "Metrics reporter classes"
          },
          "codedata": {
            "type": "LISTENER_INIT_PARAM",
            "originalName": "metricsReporterClasses"
          },
          "placeholder": "\"\"",
          "valueType": "EXPRESSION",
          "valueTypeConstraint": "string",
          "value": "",
          "typeMembers": [
            {
              "type": "string",
              "packageInfo": "",
              "kind": "BASIC_TYPE",
              "selected": false
            }
          ],
          "enabled": true,
          "editable": true,
          "optional": true,
          "advanced": true
        },
        "clientId": {
          "metadata": {
            "label": "clientId",
            "description": "Identifier to be used for server side logging"
          },
          "codedata": {
            "type": "LISTENER_INIT_PARAM",
            "originalName": "clientId"
          },
          "placeholder": "\"\"",
          "valueType": "EXPRESSION",
          "valueTypeConstraint": "string",
          "value": "",
          "typeMembers": [
            {
              "type": "string",
              "packageInfo": "",
              "kind": "BASIC_TYPE",
              "selected": false
            }
          ],
          "enabled": true,
          "editable": true,
          "optional": true,
          "advanced": true
        },
        "interceptorClasses": {
          "metadata": {
            "label": "interceptorClasses",
            "description": "Interceptor classes to be used before sending the records"
          },
          "codedata": {
            "type": "LISTENER_INIT_PARAM",
            "originalName": "interceptorClasses"
          },
          "placeholder": "\"\"",
          "valueType": "EXPRESSION",
          "valueTypeConstraint": "string",
          "value": "",
          "typeMembers": [
            {
              "type": "string",
              "packageInfo": "",
              "kind": "BASIC_TYPE",
              "selected": false
            }
          ],
          "enabled": true,
          "editable": true,
          "optional": true,
          "advanced": true
        },
        "isolationLevel": {
          "metadata": {
            "label": "isolationLevel",
            "description": "Transactional message reading method"
          },
          "codedata": {
            "type": "LISTENER_INIT_PARAM",
            "originalName": "isolationLevel"
          },
          "placeholder": "\"read_committed\"",
          "valueType": "EXPRESSION",
          "valueTypeConstraint": "kafka:IsolationLevel",
          "value": "",
          "typeMembers": [
            {
              "type": "IsolationLevel",
              "packageInfo": "ballerinax:kafka:4.5.0",
              "kind": "BASIC_TYPE",
              "selected": false
            }
          ],
          "enabled": true,
          "editable": true,
          "optional": true,
          "advanced": true
        },
        "schemaRegistryUrl": {
          "metadata": {
            "label": "schemaRegistryUrl",
            "description": "Avro schema registry URL. Use this field to specify the schema registry URL, if the Avro serializer\nis used"
          },
          "codedata": {
            "type": "LISTENER_INIT_PARAM",
            "originalName": "schemaRegistryUrl"
          },
          "placeholder": "\"\"",
          "valueType": "EXPRESSION",
          "valueTypeConstraint": "string",
          "value": "",
          "typeMembers": [
            {
              "type": "string",
              "packageInfo": "",
              "kind": "BASIC_TYPE",
              "selected": false
            }
          ],
          "enabled": true,
          "editable": true,
          "optional": true,
          "advanced": true
        },
        "schemaRegistryConfig": {
          "metadata": {
            "label": "schemaRegistryConfig",
            "description": "Configurations to initialize a schema registry"
          },
          "codedata": {
            "type": "LISTENER_INIT_PARAM",
            "originalName": "schemaRegistryConfig"
          },
          "placeholder": "{}",
          "valueType": "EXPRESSION",
          "valueTypeConstraint": "map<anydata> & readonly",
          "value": "",
          "typeMembers": [
            {
              "type": "map<anydata> & readonly",
              "packageInfo": "",
              "kind": "MAP_TYPE",
              "selected": false
            }
          ],
          "enabled": true,
          "editable": true,
          "optional": true,
          "advanced": true
        },
        "keyDeserializerType": {
          "metadata": {
            "label": "keyDeserializerType",
            "description": "Key deserialization type"
          },
          "codedata": {
            "type": "LISTENER_INIT_PARAM",
            "originalName": "keyDeserializerType"
          },
          "placeholder": "kafka:DES_BYTE_ARRAY",
          "valueType": "EXPRESSION",
          "valueTypeConstraint": "kafka:DeserializerType",
          "value": "",
          "typeMembers": [
            {
              "type": "DeserializerType",
              "packageInfo": "ballerinax:kafka:4.5.0",
              "kind": "BASIC_TYPE",
              "selected": false
            }
          ],
          "enabled": true,
          "editable": true,
          "optional": true,
          "advanced": true
        },
        "valueDeserializerType": {
          "metadata": {
            "label": "valueDeserializerType",
            "description": "Value deserialization type"
          },
          "codedata": {
            "type": "LISTENER_INIT_PARAM",
            "originalName": "valueDeserializerType"
          },
          "placeholder": "kafka:DES_BYTE_ARRAY",
          "valueType": "EXPRESSION",
          "valueTypeConstraint": "kafka:DeserializerType",
          "value": "",
          "typeMembers": [
            {
              "type": "DeserializerType",
              "packageInfo": "ballerinax:kafka:4.5.0",
              "kind": "BASIC_TYPE",
              "selected": false
            }
          ],
          "enabled": true,
          "editable": true,
          "optional": true,
          "advanced": true
        },
        "additionalProperties": {
          "metadata": {
            "label": "additionalProperties",
            "description": "Additional properties for the property fields not provided by the Ballerina `kafka` module. Use\nthis with caution since this can override any of the fields. It is not recomendded to use\nthis field except in an extreme situation"
          },
          "codedata": {
            "type": "LISTENER_INIT_PARAM",
            "originalName": "additionalProperties"
          },
          "placeholder": "{}",
          "valueType": "EXPRESSION",
          "valueTypeConstraint": "map<string>",
          "value": "",
          "typeMembers": [
            {
              "type": "map<string>",
              "packageInfo": "",
              "kind": "MAP_TYPE",
              "selected": false
            }
          ],
          "enabled": true,
          "editable": true,
          "optional": true,
          "advanced": true
        },
        "sessionTimeout": {
          "metadata": {
            "label": "sessionTimeout",
            "description": "Timeout (in seconds) used to detect consumer failures when the heartbeat threshold is reached"
          },
          "codedata": {
            "type": "LISTENER_INIT_PARAM",
            "originalName": "sessionTimeout"
          },
          "placeholder": "0.0d",
          "valueType": "EXPRESSION",
          "valueTypeConstraint": "decimal",
          "value": "",
          "typeMembers": [
            {
              "type": "decimal",
              "packageInfo": "",
              "kind": "BASIC_TYPE",
              "selected": false
            }
          ],
          "enabled": true,
          "editable": true,
          "optional": true,
          "advanced": true
        },
        "heartBeatInterval": {
          "metadata": {
            "label": "heartBeatInterval",
            "description": "Expected time (in seconds) between the heartbeats"
          },
          "codedata": {
            "type": "LISTENER_INIT_PARAM",
            "originalName": "heartBeatInterval"
          },
          "placeholder": "0.0d",
          "valueType": "EXPRESSION",
          "valueTypeConstraint": "decimal",
          "value": "",
          "typeMembers": [
            {
              "type": "decimal",
              "packageInfo": "",
              "kind": "BASIC_TYPE",
              "selected": false
            }
          ],
          "enabled": true,
          "editable": true,
          "optional": true,
          "advanced": true
        },
        "metadataMaxAge": {
          "metadata": {
            "label": "metadataMaxAge",
            "description": "Maximum time (in seconds) to force a refresh of metadata"
          },
          "codedata": {
            "type": "LISTENER_INIT_PARAM",
            "originalName": "metadataMaxAge"
          },
          "placeholder": "0.0d",
          "valueType": "EXPRESSION",
          "valueTypeConstraint": "decimal",
          "value": "",
          "typeMembers": [
            {
              "type": "decimal",
              "packageInfo": "",
              "kind": "BASIC_TYPE",
              "selected": false
            }
          ],
          "enabled": true,
          "editable": true,
          "optional": true,
          "advanced": true
        },
        "autoCommitInterval": {
          "metadata": {
            "label": "autoCommitInterval",
            "description": "Auto committing interval (in seconds) for commit offset when auto-committing is enabled"
          },
          "codedata": {
            "type": "LISTENER_INIT_PARAM",
            "originalName": "autoCommitInterval"
          },
          "placeholder": "0.0d",
          "valueType": "EXPRESSION",
          "valueTypeConstraint": "decimal",
          "value": "",
          "typeMembers": [
            {
              "type": "decimal",
              "packageInfo": "",
              "kind": "BASIC_TYPE",
              "selected": false
            }
          ],
          "enabled": true,
          "editable": true,
          "optional": true,
          "advanced": true
        },
        "maxPartitionFetchBytes": {
          "metadata": {
            "label": "maxPartitionFetchBytes",
            "description": "The maximum amount of data the server returns per partition"
          },
          "codedata": {
            "type": "LISTENER_INIT_PARAM",
            "originalName": "maxPartitionFetchBytes"
          },
          "placeholder": "0",
          "valueType": "EXPRESSION",
          "valueTypeConstraint": "int",
          "value": "",
          "typeMembers": [
            {
              "type": "int",
              "packageInfo": "",
              "kind": "BASIC_TYPE",
              "selected": false
            }
          ],
          "enabled": true,
          "editable": true,
          "optional": true,
          "advanced": true
        },
        "sendBuffer": {
          "metadata": {
            "label": "sendBuffer",
            "description": "Size of the TCP send buffer (SO_SNDBUF)"
          },
          "codedata": {
            "type": "LISTENER_INIT_PARAM",
            "originalName": "sendBuffer"
          },
          "placeholder": "0",
          "valueType": "EXPRESSION",
          "valueTypeConstraint": "int",
          "value": "",
          "typeMembers": [
            {
              "type": "int",
              "packageInfo": "",
              "kind": "BASIC_TYPE",
              "selected": false
            }
          ],
          "enabled": true,
          "editable": true,
          "optional": true,
          "advanced": true
        },
        "receiveBuffer": {
          "metadata": {
            "label": "receiveBuffer",
            "description": "Size of the TCP receive buffer (SO_RCVBUF)"
          },
          "codedata": {
            "type": "LISTENER_INIT_PARAM",
            "originalName": "receiveBuffer"
          },
          "placeholder": "0",
          "valueType": "EXPRESSION",
          "valueTypeConstraint": "int",
          "value": "",
          "typeMembers": [
            {
              "type": "int",
              "packageInfo": "",
              "kind": "BASIC_TYPE",
              "selected": false
            }
          ],
          "enabled": true,
          "editable": true,
          "optional": true,
          "advanced": true
        },
        "fetchMinBytes": {
          "metadata": {
            "label": "fetchMinBytes",
            "description": "Minimum amount of data the server should return for a fetch request"
          },
          "codedata": {
            "type": "LISTENER_INIT_PARAM",
            "originalName": "fetchMinBytes"
          },
          "placeholder": "0",
          "valueType": "EXPRESSION",
          "valueTypeConstraint": "int",
          "value": "",
          "typeMembers": [
            {
              "type": "int",
              "packageInfo": "",
              "kind": "BASIC_TYPE",
              "selected": false
            }
          ],
          "enabled": true,
          "editable": true,
          "optional": true,
          "advanced": true
        },
        "fetchMaxBytes": {
          "metadata": {
            "label": "fetchMaxBytes",
            "description": "Maximum amount of data the server should return for a fetch request"
          },
          "codedata": {
            "type": "LISTENER_INIT_PARAM",
            "originalName": "fetchMaxBytes"
          },
          "placeholder": "0",
          "valueType": "EXPRESSION",
          "valueTypeConstraint": "int",
          "value": "",
          "typeMembers": [
            {
              "type": "int",
              "packageInfo": "",
              "kind": "BASIC_TYPE",
              "selected": false
            }
          ],
          "enabled": true,
          "editable": true,
          "optional": true,
          "advanced": true
        },
        "fetchMaxWaitTime": {
          "metadata": {
            "label": "fetchMaxWaitTime",
            "description": "Maximum amount of time (in seconds) the server will block before answering the fetch request"
          },
          "codedata": {
            "type": "LISTENER_INIT_PARAM",
            "originalName": "fetchMaxWaitTime"
          },
          "placeholder": "0.0d",
          "valueType": "EXPRESSION",
          "valueTypeConstraint": "decimal",
          "value": "",
          "typeMembers": [
            {
              "type": "decimal",
              "packageInfo": "",
              "kind": "BASIC_TYPE",
              "selected": false
            }
          ],
          "enabled": true,
          "editable": true,
          "optional": true,
          "advanced": true
        },
        "reconnectBackoffTimeMax": {
          "metadata": {
            "label": "reconnectBackoffTimeMax",
            "description": "Maximum amount of time in seconds to wait when reconnecting"
          },
          "codedata": {
            "type": "LISTENER_INIT_PARAM",
            "originalName": "reconnectBackoffTimeMax"
          },
          "placeholder": "0.0d",
          "valueType": "EXPRESSION",
          "valueTypeConstraint": "decimal",
          "value": "",
          "typeMembers": [
            {
              "type": "decimal",
              "packageInfo": "",
              "kind": "BASIC_TYPE",
              "selected": false
            }
          ],
          "enabled": true,
          "editable": true,
          "optional": true,
          "advanced": true
        },
        "retryBackoff": {
          "metadata": {
            "label": "retryBackoff",
            "description": "Time (in seconds) to wait before attempting to retry a failed request"
          },
          "codedata": {
            "type": "LISTENER_INIT_PARAM",
            "originalName": "retryBackoff"
          },
          "placeholder": "0.0d",
          "valueType": "EXPRESSION",
          "valueTypeConstraint": "decimal",
          "value": "",
          "typeMembers": [
            {
              "type": "decimal",
              "packageInfo": "",
              "kind": "BASIC_TYPE",
              "selected": false
            }
          ],
          "enabled": true,
          "editable": true,
          "optional": true,
          "advanced": true
        },
        "metricsSampleWindow": {
          "metadata": {
            "label": "metricsSampleWindow",
            "description": "Window of time (in seconds) a metrics sample is computed over"
          },
          "codedata": {
            "type": "LISTENER_INIT_PARAM",
            "originalName": "metricsSampleWindow"
          },
          "placeholder": "0.0d",
          "valueType": "EXPRESSION",
          "valueTypeConstraint": "decimal",
          "value": "",
          "typeMembers": [
            {
              "type": "decimal",
              "packageInfo": "",
              "kind": "BASIC_TYPE",
              "selected": false
            }
          ],
          "enabled": true,
          "editable": true,
          "optional": true,
          "advanced": true
        },
        "metricsNumSamples": {
          "metadata": {
            "label": "metricsNumSamples",
            "description": "Number of samples maintained to compute metrics"
          },
          "codedata": {
            "type": "LISTENER_INIT_PARAM",
            "originalName": "metricsNumSamples"
          },
          "placeholder": "0",
          "valueType": "EXPRESSION",
          "valueTypeConstraint": "int",
          "value": "",
          "typeMembers": [
            {
              "type": "int",
              "packageInfo": "",
              "kind": "BASIC_TYPE",
              "selected": false
            }
          ],
          "enabled": true,
          "editable": true,
          "optional": true,
          "advanced": true
        },
        "requestTimeout": {
          "metadata": {
            "label": "requestTimeout",
            "description": "Wait time (in seconds) for response of a request"
          },
          "codedata": {
            "type": "LISTENER_INIT_PARAM",
            "originalName": "requestTimeout"
          },
          "placeholder": "0.0d",
          "valueType": "EXPRESSION",
          "valueTypeConstraint": "decimal",
          "value": "",
          "typeMembers": [
            {
              "type": "decimal",
              "packageInfo": "",
              "kind": "BASIC_TYPE",
              "selected": false
            }
          ],
          "enabled": true,
          "editable": true,
          "optional": true,
          "advanced": true
        },
        "connectionMaxIdleTime": {
          "metadata": {
            "label": "connectionMaxIdleTime",
            "description": "Close idle connections after the number of seconds"
          },
          "codedata": {
            "type": "LISTENER_INIT_PARAM",
            "originalName": "connectionMaxIdleTime"
          },
          "placeholder": "0.0d",
          "valueType": "EXPRESSION",
          "valueTypeConstraint": "decimal",
          "value": "",
          "typeMembers": [
            {
              "type": "decimal",
              "packageInfo": "",
              "kind": "BASIC_TYPE",
              "selected": false
            }
          ],
          "enabled": true,
          "editable": true,
          "optional": true,
          "advanced": true
        },
        "maxPollRecords": {
          "metadata": {
            "label": "maxPollRecords",
            "description": "Maximum number of records returned in a single call to poll"
          },
          "codedata": {
            "type": "LISTENER_INIT_PARAM",
            "originalName": "maxPollRecords"
          },
          "placeholder": "0",
          "valueType": "EXPRESSION",
          "valueTypeConstraint": "int",
          "value": "",
          "typeMembers": [
            {
              "type": "int",
              "packageInfo": "",
              "kind": "BASIC_TYPE",
              "selected": false
            }
          ],
          "enabled": true,
          "editable": true,
          "optional": true,
          "advanced": true
        },
        "maxPollInterval": {
          "metadata": {
            "label": "maxPollInterval",
            "description": "Maximum delay between invocations of poll"
          },
          "codedata": {
            "type": "LISTENER_INIT_PARAM",
            "originalName": "maxPollInterval"
          },
          "placeholder": "0",
          "valueType": "EXPRESSION",
          "valueTypeConstraint": "int",
          "value": "",
          "typeMembers": [
            {
              "type": "int",
              "packageInfo": "",
              "kind": "BASIC_TYPE",
              "selected": false
            }
          ],
          "enabled": true,
          "editable": true,
          "optional": true,
          "advanced": true
        },
        "reconnectBackoffTime": {
          "metadata": {
            "label": "reconnectBackoffTime",
            "description": "Time (in seconds) to wait before attempting to reconnect"
          },
          "codedata": {
            "type": "LISTENER_INIT_PARAM",
            "originalName": "reconnectBackoffTime"
          },
          "placeholder": "0.0d",
          "valueType": "EXPRESSION",
          "valueTypeConstraint": "decimal",
          "value": "",
          "typeMembers": [
            {
              "type": "decimal",
              "packageInfo": "",
              "kind": "BASIC_TYPE",
              "selected": false
            }
          ],
          "enabled": true,
          "editable": true,
          "optional": true,
          "advanced": true
        },
        "pollingTimeout": {
          "metadata": {
            "label": "pollingTimeout",
            "description": "Timeout interval for polling in seconds"
          },
          "codedata": {
            "type": "LISTENER_INIT_PARAM",
            "originalName": "pollingTimeout"
          },
          "placeholder": "0.0d",
          "valueType": "EXPRESSION",
          "valueTypeConstraint": "decimal",
          "value": "",
          "typeMembers": [
            {
              "type": "decimal",
              "packageInfo": "",
              "kind": "BASIC_TYPE",
              "selected": false
            }
          ],
          "enabled": true,
          "editable": true,
          "optional": true,
          "advanced": true
        },
        "pollingInterval": {
          "metadata": {
            "label": "pollingInterval",
            "description": "Polling interval for the consumer in seconds"
          },
          "codedata": {
            "type": "LISTENER_INIT_PARAM",
            "originalName": "pollingInterval"
          },
          "placeholder": "0.0d",
          "valueType": "EXPRESSION",
          "valueTypeConstraint": "decimal",
          "value": "",
          "typeMembers": [
            {
              "type": "decimal",
              "packageInfo": "",
              "kind": "BASIC_TYPE",
              "selected": false
            }
          ],
          "enabled": true,
          "editable": true,
          "optional": true,
          "advanced": true
        },
        "concurrentConsumers": {
          "metadata": {
            "label": "concurrentConsumers",
            "description": "Number of concurrent consumers"
          },
          "codedata": {
            "type": "LISTENER_INIT_PARAM",
            "originalName": "concurrentConsumers"
          },
          "placeholder": "0",
          "valueType": "EXPRESSION",
          "valueTypeConstraint": "int",
          "value": "",
          "typeMembers": [
            {
              "type": "int",
              "packageInfo": "",
              "kind": "BASIC_TYPE",
              "selected": false
            }
          ],
          "enabled": true,
          "editable": true,
          "optional": true,
          "advanced": true
        },
        "defaultApiTimeout": {
          "metadata": {
            "label": "defaultApiTimeout",
            "description": "Default API timeout value (in seconds) for APIs with duration"
          },
          "codedata": {
            "type": "LISTENER_INIT_PARAM",
            "originalName": "defaultApiTimeout"
          },
          "placeholder": "0.0d",
          "valueType": "EXPRESSION",
          "valueTypeConstraint": "decimal",
          "value": "",
          "typeMembers": [
            {
              "type": "decimal",
              "packageInfo": "",
              "kind": "BASIC_TYPE",
              "selected": false
            }
          ],
          "enabled": true,
          "editable": true,
          "optional": true,
          "advanced": true
        },
        "autoCommit": {
          "metadata": {
            "label": "autoCommit",
            "description": "Enables auto committing offsets"
          },
          "codedata": {
            "type": "LISTENER_INIT_PARAM",
            "originalName": "autoCommit"
          },
          "placeholder": "true",
          "valueType": "EXPRESSION",
          "valueTypeConstraint": "boolean",
          "value": "",
          "typeMembers": [
            {
              "type": "boolean",
              "packageInfo": "",
              "kind": "BASIC_TYPE",
              "selected": false
            }
          ],
          "enabled": true,
          "editable": true,
          "optional": true,
          "advanced": true
        },
        "checkCRCS": {
          "metadata": {
            "label": "checkCRCS",
            "description": "Checks the CRC32 of the records consumed. This ensures that no on-the-wire or on-disk corruption occurred\nto the messages. This may add some overhead and might need to be set to `false` if extreme\nperformance is required"
          },
          "codedata": {
            "type": "LISTENER_INIT_PARAM",
            "originalName": "checkCRCS"
          },
          "placeholder": "true",
          "valueType": "EXPRESSION",
          "valueTypeConstraint": "boolean",
          "value": "",
          "typeMembers": [
            {
              "type": "boolean",
              "packageInfo": "",
              "kind": "BASIC_TYPE",
              "selected": false
            }
          ],
          "enabled": true,
          "editable": true,
          "optional": true,
          "advanced": true
        },
        "excludeInternalTopics": {
          "metadata": {
            "label": "excludeInternalTopics",
            "description": "Whether records from internal topics should be exposed to the consumer"
          },
          "codedata": {
            "type": "LISTENER_INIT_PARAM",
            "originalName": "excludeInternalTopics"
          },
          "placeholder": "true",
          "valueType": "EXPRESSION",
          "valueTypeConstraint": "boolean",
          "value": "",
          "typeMembers": [
            {
              "type": "boolean",
              "packageInfo": "",
              "kind": "BASIC_TYPE",
              "selected": false
            }
          ],
          "enabled": true,
          "editable": true,
          "optional": true,
          "advanced": true
        },
        "decoupleProcessing": {
          "metadata": {
            "label": "decoupleProcessing",
            "description": "Decouples processing"
          },
          "codedata": {
            "type": "LISTENER_INIT_PARAM",
            "originalName": "decoupleProcessing"
          },
          "placeholder": "false",
          "valueType": "EXPRESSION",
          "valueTypeConstraint": "boolean",
          "value": "",
          "typeMembers": [
            {
              "type": "boolean",
              "packageInfo": "",
              "kind": "BASIC_TYPE",
              "selected": false
            }
          ],
          "enabled": true,
          "editable": true,
          "optional": true,
          "advanced": true
        },
        "validation": {
          "metadata": {
            "label": "validation",
            "description": "Configuration related to constraint validation check"
          },
          "codedata": {
            "type": "LISTENER_INIT_PARAM",
            "originalName": "validation"
          },
          "placeholder": "true",
          "valueType": "EXPRESSION",
          "valueTypeConstraint": "boolean",
          "value": "",
          "typeMembers": [
            {
              "type": "boolean",
              "packageInfo": "",
              "kind": "BASIC_TYPE",
              "selected": false
            }
          ],
          "enabled": true,
          "editable": true,
          "optional": true,
          "advanced": true
        },
        "autoSeekOnValidationFailure": {
          "metadata": {
            "label": "autoSeekOnValidationFailure",
            "description": "Automatically seeks past the errornous records in the event of an data-binding or\nvalidating constraints failure"
          },
          "codedata": {
            "type": "LISTENER_INIT_PARAM",
            "originalName": "autoSeekOnValidationFailure"
          },
          "placeholder": "true",
          "valueType": "EXPRESSION",
          "valueTypeConstraint": "boolean",
          "value": "",
          "typeMembers": [
            {
              "type": "boolean",
              "packageInfo": "",
              "kind": "BASIC_TYPE",
              "selected": false
            }
          ],
          "enabled": true,
          "editable": true,
          "optional": true,
          "advanced": true
        },
        "secureSocket": {
          "metadata": {
            "label": "secureSocket",
            "description": "Configurations related to SSL/TLS encryption"
          },
          "codedata": {
            "type": "LISTENER_INIT_PARAM",
            "originalName": "secureSocket"
          },
          "placeholder": "{cert: {path: \"\", password: \"\"}}",
          "valueType": "EXPRESSION",
          "valueTypeConstraint": "kafka:SecureSocket",
          "value": "",
          "typeMembers": [
            {
              "type": "SecureSocket",
              "packageInfo": "ballerinax:kafka:4.5.0",
              "kind": "RECORD_TYPE",
              "selected": false
            }
          ],
          "enabled": true,
          "editable": true,
          "optional": true,
          "advanced": true
        },
        "auth": {
          "metadata": {
            "label": "auth",
            "description": "Authentication-related configurations for the `kafka:Consumer`"
          },
          "codedata": {
            "type": "LISTENER_INIT_PARAM",
            "originalName": "auth"
          },
          "placeholder": "{username: \"\", password: \"\"}",
          "valueType": "EXPRESSION",
          "valueTypeConstraint": "kafka:AuthenticationConfiguration",
          "value": "",
          "typeMembers": [
            {
              "type": "AuthenticationConfiguration",
              "packageInfo": "ballerinax:kafka:4.5.0",
              "kind": "RECORD_TYPE",
              "selected": false
            }
          ],
          "enabled": true,
          "editable": true,
          "optional": true,
          "advanced": true
        },
        "securityProtocol": {
          "metadata": {
            "label": "securityProtocol",
            "description": "Type of the security protocol to use in the broker connection"
          },
          "codedata": {
            "type": "LISTENER_INIT_PARAM",
            "originalName": "securityProtocol"
          },
          "placeholder": "kafka:PROTOCOL_PLAINTEXT",
          "valueType": "EXPRESSION",
          "valueTypeConstraint": "kafka:SecurityProtocol",
          "value": "",
          "typeMembers": [
            {
              "type": "SecurityProtocol",
              "packageInfo": "ballerinax:kafka:4.5.0",
              "kind": "BASIC_TYPE",
              "selected": false
            }
          ],
          "enabled": true,
          "editable": true,
          "optional": true,
          "advanced": true
        }
      }
    }
  }
}
