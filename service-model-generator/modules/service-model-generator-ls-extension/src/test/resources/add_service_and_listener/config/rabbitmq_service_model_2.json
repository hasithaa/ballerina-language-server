{
  "filePath": "sample1/main.bal",
  "description": "Test adding a rabbitmq service with an existing listener",
  "serviceInitModel": {
    "id": "9",
    "displayName": "RabbitMQ Event Handler",
    "description": "Create a service to handle messages from a RabbitMQ queue",
    "orgName": "ballerinax",
    "packageName": "rabbitmq",
    "moduleName": "rabbitmq",
    "version": "3.2.0",
    "type": "rabbitmq",
    "icon": "https://bcentral-packageicons.azureedge.net/images/ballerinax_rabbitmq_3.2.0.png",
    "properties": {
      "basePath": {
        "metadata": {
          "label": "Queue Name",
          "description": "The name of the queue to listen to"
        },
        "codedata": {
          "argType": "SERVICE_BASE_PATH"
        },
        "placeholder": "\"myQueue\"",
        "valueType": "EXPRESSION",
        "valueTypeConstraint": "string",
        "value": "",
        "items": [],
        "typeMembers": [],
        "enabled": true,
        "editable": true,
        "optional": false,
        "advanced": false
      },
      "existingListener": {
        "metadata": {
          "label": "Select Listener",
          "description": "Select from the existing RabbitMQ listeners"
        },
        "valueType": "SINGLE_SELECT",
        "value": "orderListener",
        "items": [
          "orderListener",
          "deliveryListener"
        ],
        "enabled": true,
        "editable": true,
        "optional": false,
        "advanced": false
      }
    }
  },
  "output": {
    "sample1/main.bal": [
      {
        "range": {
          "start": {
            "line": 0,
            "character": 0
          },
          "end": {
            "line": 0,
            "character": 0
          }
        },
        "newText": "\nimport ballerinax/rabbitmq;\n"
      },
      {
        "range": {
          "start": {
            "line": 57,
            "character": 3
          },
          "end": {
            "line": 57,
            "character": 3
          }
        },
        "newText": "\n\nservice rabbitmq:Service on orderListener {\n\tremote function onMessage(rabbitmq:AnydataMessage message, rabbitmq:Caller caller) returns error? {\n\t\tdo {\n\t\t} on fail error err {\n\t\t\t// handle error\n\t\t\treturn error(\"unhandled error\", err);\n\t\t}\n\t}\n\n\tremote function onError(rabbitmq:AnydataMessage message, rabbitmq:Error rabbitmqError) returns error? {\n\t\tdo {\n\t\t} on fail error err {\n\t\t\t// handle error\n\t\t\treturn error(\"unhandled error\", err);\n\t\t}\n\t}\n}\n"
      }
    ]
  }
}
